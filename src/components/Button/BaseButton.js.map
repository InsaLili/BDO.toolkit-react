{"version":3,"file":"BaseButton.js","sourceRoot":"../src/","sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRenderFunction,\r\n  anchorProperties,\r\n  assign,\r\n  autobind,\r\n  buttonProperties,\r\n  getId,\r\n  getNativeProps,\r\n  KeyCodes\r\n} from '../../Utilities';\r\nimport { Icon, IIconProps } from '../../Icon';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\r\nimport { IButtonProps, IButton } from './Button.types';\r\nimport { IButtonClassNames, getBaseButtonClassNames } from './BaseButton.classNames';\r\nimport { getClassNames as getBaseSplitButtonClassNames, ISplitButtonClassNames } from './SplitButton/SplitButton.classNames';\r\n\r\nexport interface IBaseButtonProps extends IButtonProps {\r\n  baseClassName?: string;\r\n  variantClassName?: string;\r\n}\r\n\r\nexport interface IBaseButtonState {\r\n  menuProps?: IContextualMenuProps | null;\r\n}\r\n\r\nexport class BaseButton extends BaseComponent<IBaseButtonProps, IBaseButtonState> implements IButton {\r\n\r\n  private get _isSplitButton(): boolean {\r\n    return (!!this.props.menuProps && !!this.props.onClick) && this.props.split === true;\r\n  }\r\n\r\n  private get _isExpanded(): boolean {\r\n    return !!this.state.menuProps;\r\n  }\r\n\r\n  public static defaultProps = {\r\n    baseClassName: 'ms-Button',\r\n    classNames: {},\r\n    styles: {},\r\n    split: false,\r\n  };\r\n\r\n  private _buttonElement: HTMLElement;\r\n  private _splitButtonContainer: HTMLElement;\r\n  private _labelId: string;\r\n  private _descriptionId: string;\r\n  private _ariaDescriptionId: string;\r\n  private _classNames: IButtonClassNames;\r\n\r\n  constructor(props: IBaseButtonProps, rootClassName: string) {\r\n    super(props);\r\n\r\n    this._warnConditionallyRequiredProps(\r\n      ['menuProps', 'onClick'],\r\n      'split',\r\n      this.props.split!\r\n    );\r\n\r\n    this._warnDeprecations({\r\n      rootProps: undefined\r\n    });\r\n    this._labelId = getId();\r\n    this._descriptionId = getId();\r\n    this._ariaDescriptionId = getId();\r\n    this.state = {\r\n      menuProps: null\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      ariaDescription,\r\n      ariaLabel,\r\n      ariaHidden,\r\n      className,\r\n      description,\r\n      disabled,\r\n      primaryDisabled,\r\n      href,\r\n      iconProps,\r\n      menuIconProps,\r\n      styles,\r\n      text,\r\n      checked,\r\n      variantClassName,\r\n      theme,\r\n      getClassNames\r\n         } = this.props;\r\n\r\n    let { menuProps } = this.state;\r\n    // Button is disabled if the whole button (in case of splitbutton is disabled) or if the primary action is disabled\r\n    let isPrimaryButtonDisabled = (disabled || primaryDisabled);\r\n\r\n    this._classNames = getClassNames ? getClassNames(\r\n      theme!,\r\n      className!,\r\n      variantClassName!,\r\n      iconProps && iconProps.className,\r\n      menuIconProps && menuIconProps.className,\r\n      isPrimaryButtonDisabled!,\r\n      checked!,\r\n      !!this.state.menuProps,\r\n      this.props.split) : getBaseButtonClassNames(styles!, className!,\r\n        variantClassName!,\r\n        iconProps && iconProps.className,\r\n        menuIconProps && menuIconProps.className,\r\n        isPrimaryButtonDisabled!,\r\n        checked!,\r\n        !!this.state.menuProps,\r\n        this.props.split);\r\n\r\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\r\n    // Anchor tag cannot be disabled hence in disabled state rendering\r\n    // anchor button as normal button\r\n    const renderAsAnchor: boolean = !isPrimaryButtonDisabled && !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(\r\n      assign(\r\n        renderAsAnchor ? {} : { type: 'button' },\r\n        this.props.rootProps,\r\n        this.props),\r\n      renderAsAnchor ? anchorProperties : buttonProperties,\r\n      [\r\n        'disabled' // Let disabled buttons be focused and styled as disabled.\r\n      ]);\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = _ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = _descriptionId;\r\n    } else if ((nativeProps as any)['aria-describedby']) {\r\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    // If an explicit ariaLabel is given, use that as the label and we're done.\r\n    // If an explicit aria-labelledby is given, use that and we're done.\r\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\r\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\r\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\r\n    let ariaLabelledBy = null;\r\n    if (!ariaLabel) {\r\n      if ((nativeProps as any)['aria-labelledby']) {\r\n        ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\r\n      } else if (ariaDescribedBy) {\r\n        ariaLabelledBy = text ? _labelId : null;\r\n      }\r\n    }\r\n\r\n    const buttonProps = assign(\r\n      nativeProps,\r\n      {\r\n        className: this._classNames.root,\r\n        ref: this._resolveRef('_buttonElement'),\r\n        'disabled': isPrimaryButtonDisabled,\r\n        'aria-label': ariaLabel,\r\n        'aria-labelledby': ariaLabelledBy,\r\n        'aria-describedby': ariaDescribedBy,\r\n        'data-is-focusable': ((this.props as any)['data-is-focusable'] === false || disabled) ? false : true,\r\n        'aria-pressed': checked\r\n      }\r\n    );\r\n\r\n    if (ariaHidden) {\r\n      buttonProps['aria-hidden'] = true;\r\n    }\r\n\r\n    if (this._isSplitButton) {\r\n      return (\r\n        this._onRenderSplitButtonContent(tag, buttonProps)\r\n      );\r\n    } else if (this.props.menuProps) {\r\n      assign(\r\n        buttonProps,\r\n        {\r\n          'onKeyDown': this._onMenuKeyDown,\r\n          'onClick': this._onMenuClick,\r\n          'aria-expanded': this._isExpanded,\r\n          'aria-owns': this.state.menuProps ? this._labelId + '-menu' : null,\r\n          'aria-haspopup': true\r\n        }\r\n      );\r\n    }\r\n\r\n    return this._onRenderContent(tag, buttonProps);\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState) {\r\n    // If Button's menu was closed, run onAfterMenuDismiss\r\n    if (this.props.onAfterMenuDismiss && prevState.menuProps && !this.state.menuProps) {\r\n      this.props.onAfterMenuDismiss();\r\n    }\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n\r\n  public dismissMenu(): void {\r\n    this.setState({ menuProps: null });\r\n  }\r\n\r\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    let props = this.props;\r\n    let Tag = tag;\r\n    let {\r\n      menuIconProps,\r\n      menuProps,\r\n      onRenderIcon = this._onRenderIcon,\r\n      onRenderAriaDescription = this._onRenderAriaDescription,\r\n      onRenderChildren = this._onRenderChildren,\r\n      onRenderMenu = this._onRenderMenu,\r\n      onRenderMenuIcon = this._onRenderMenuIcon\r\n    } = props;\r\n\r\n    const Content = (\r\n      <Tag {...buttonProps }>\r\n        <div className={ this._classNames.flexContainer } >\r\n          { onRenderIcon(props, this._onRenderIcon) }\r\n          { this._onRenderTextContents() }\r\n          { onRenderAriaDescription(props, this._onRenderAriaDescription) }\r\n          { onRenderChildren(props, this._onRenderChildren) }\r\n          { !this._isSplitButton && (menuProps || menuIconProps || this.props.onRenderMenuIcon) && onRenderMenuIcon(this.props, this._onRenderMenuIcon) }\r\n          { this.state.menuProps && !this.state.menuProps.doNotLayer && onRenderMenu(menuProps, this._onRenderMenu) }\r\n        </div>\r\n      </Tag>\r\n    );\r\n\r\n    if (menuProps && menuProps.doNotLayer) {\r\n      return (\r\n        <div style={ { display: 'inline-block' } }>\r\n          { Content }\r\n          { this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu) }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return Content;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderIcon(buttonProps?: IButtonProps, defaultRender?: IRenderFunction<IButtonProps>): JSX.Element | null {\r\n    let {\r\n      iconProps\r\n       } = this.props;\r\n\r\n    if (iconProps) {\r\n      return Icon({\r\n        ...iconProps,\r\n        className: this._classNames.icon\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderTextContents(): JSX.Element | (JSX.Element | null)[] {\r\n    let {\r\n      text,\r\n      children,\r\n      description,\r\n      onRenderText = this._onRenderText,\r\n      onRenderDescription = this._onRenderDescription\r\n    } = this.props;\r\n\r\n    if (text || typeof (children) === 'string' || description) {\r\n      return (\r\n        <div\r\n          className={ this._classNames.textContainer }\r\n        >\r\n          { onRenderText(this.props, this._onRenderText) }\r\n          { onRenderDescription(this.props, this._onRenderDescription) }\r\n        </div>\r\n      );\r\n    }\r\n    return ([\r\n      onRenderText(this.props, this._onRenderText),\r\n      onRenderDescription(this.props, this._onRenderDescription)\r\n    ]);\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderText(): JSX.Element | null {\r\n    let {\r\n      children,\r\n      text\r\n            } = this.props;\r\n\r\n    // For backwards compat, we should continue to take in the text content from children.\r\n    if (text === undefined && typeof (children) === 'string') {\r\n      text = children;\r\n    }\r\n\r\n    if (text) {\r\n      return (\r\n        <div\r\n          key={ this._labelId }\r\n          className={ this._classNames.label }\r\n          id={ this._labelId }\r\n        >\r\n          { text }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderChildren(): JSX.Element | null {\r\n    const { children } = this.props;\r\n\r\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\r\n    // If children is another component, it will be rendered after text\r\n    if (typeof (children) === 'string') {\r\n      return null;\r\n    }\r\n\r\n    return children as any;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderDescription(props: IButtonProps) {\r\n    const {\r\n    description\r\n    } = this.props;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    return description ? (\r\n      <div\r\n        key={ this._descriptionId }\r\n        className={ this._classNames.description }\r\n        id={ this._descriptionId }\r\n      >\r\n        { description }\r\n      </div>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderAriaDescription() {\r\n    const {\r\n      ariaDescription\r\n    } = this.props;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    return ariaDescription ? (\r\n      <span className={ this._classNames.screenReaderText } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenuIcon(props: IButtonProps): JSX.Element | null {\r\n    let {\r\n      menuIconProps\r\n    } = this.props;\r\n\r\n    return (\r\n\r\n      <Icon\r\n        iconName='ChevronDown'\r\n        { ...menuIconProps }\r\n        className={ this._classNames.menuIcon }\r\n      />\r\n\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenu(menuProps: IContextualMenuProps): JSX.Element {\r\n    const { onDismiss = this._dismissMenu } = menuProps;\r\n\r\n    return (\r\n      <ContextualMenu\r\n        id={ this._labelId + '-menu' }\r\n        directionalHint={ DirectionalHint.bottomLeftEdge }\r\n        {...menuProps}\r\n        className={ 'ms-BaseButton-menuhost ' + menuProps.className }\r\n        target={ this._isSplitButton ? this._splitButtonContainer : this._buttonElement }\r\n        labelElementId={ this._labelId }\r\n        onDismiss={ onDismiss }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _dismissMenu(): void {\r\n    this.setState({ menuProps: null });\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleMenu(): void {\r\n    const { menuProps } = this.props;\r\n    let currentMenuProps = this.state.menuProps;\r\n    this.setState({ menuProps: currentMenuProps ? null : menuProps });\r\n  }\r\n\r\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    const {\r\n      styles = {},\r\n      disabled,\r\n      checked,\r\n      getSplitButtonClassNames\r\n    } = this.props;\r\n\r\n    const classNames = getSplitButtonClassNames ? getSplitButtonClassNames(\r\n      !!disabled,\r\n      !!this.state.menuProps,\r\n      !!checked) : styles && getBaseSplitButtonClassNames(\r\n        styles!,\r\n        !!disabled,\r\n        !!this.state.menuProps,\r\n        !!checked);\r\n\r\n    return (\r\n      <div\r\n        aria-labelledby={ buttonProps.ariaLabel }\r\n        aria-disabled={ disabled }\r\n        aria-haspopup={ true }\r\n        aria-expanded={ this._isExpanded }\r\n        aria-pressed={ this.props.checked }\r\n        aria-describedby={ buttonProps.ariaDescription }\r\n        className={ classNames && classNames.splitButtonContainer }\r\n        onKeyDown={ this._onMenuKeyDown }\r\n        ref={ this._resolveRef('_splitButtonContainer') }\r\n      >\r\n        <span\r\n          aria-hidden={ true }\r\n          // TODO: THIS SHOULD BE REMOVED!\r\n          style={ { 'display': 'flex' } }\r\n        >\r\n          { this._onRenderContent(tag, buttonProps) }\r\n          { this._onRenderSplitButtonMenuButton(classNames) }\r\n          { this._onRenderSplitButtonDivider(classNames) }\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderSplitButtonDivider(classNames: ISplitButtonClassNames | undefined): JSX.Element | null {\r\n    if (classNames && classNames.divider) {\r\n      return <span className={ classNames.divider } />;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _onRenderSplitButtonMenuButton(classNames: ISplitButtonClassNames | undefined): JSX.Element {\r\n    let {\r\n      menuIconProps,\r\n      splitButtonAriaLabel\r\n    } = this.props;\r\n\r\n    if (menuIconProps === undefined) {\r\n      menuIconProps = {\r\n        iconName: 'ChevronDown'\r\n      };\r\n    }\r\n\r\n    let splitButtonProps = {\r\n      'styles': classNames,\r\n      'checked': this.props.checked,\r\n      'disabled': this.props.disabled,\r\n      'onClick': this._onMenuClick,\r\n      'menuProps': undefined,\r\n      'iconProps': menuIconProps,\r\n      'ariaLabel': splitButtonAriaLabel\r\n    };\r\n\r\n    return <BaseButton {...splitButtonProps} />;\r\n  }\r\n\r\n  @autobind\r\n  private _onMenuKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    if (ev.which === KeyCodes.down) {\r\n      let { onMenuClick } = this.props;\r\n      onMenuClick && onMenuClick(ev, this);\r\n      !ev.defaultPrevented && this._onToggleMenu();\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onMenuClick(ev: React.MouseEvent<HTMLAnchorElement>) {\r\n    let { onMenuClick } = this.props;\r\n    onMenuClick && onMenuClick(ev, this);\r\n    !ev.defaultPrevented && this._onToggleMenu();\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n}\r\n"]}