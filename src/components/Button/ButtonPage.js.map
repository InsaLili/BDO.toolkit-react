{"version":3,"file":"ButtonPage.js","sourceRoot":"../src/","sources":["components/Button/ButtonPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { ButtonStatus } from './Button.checklist';\r\nimport { ButtonDefaultExample } from './examples/Button.Default.Example';\r\nimport { ButtonCommandExample } from './examples/Button.Command.Example';\r\nimport { ButtonContextualMenuExample } from './examples/Button.ContextualMenu.Example';\r\nimport { ButtonCompoundExample } from './examples/Button.Compound.Example';\r\nimport { ButtonActionExample } from './examples/Button.Action.Example';\r\nimport { ButtonCommandBarExample } from './examples/Button.CommandBar.Example';\r\nimport { ButtonIconExample } from './examples/Button.Icon.Example';\r\nimport { ButtonAnchorExample } from './examples/Button.Anchor.Example';\r\nimport { ButtonScreenReaderExample } from './examples/Button.ScreenReader.Example';\r\nimport { ButtonSwapExample } from './examples/Button.Swap.Example';\r\nimport { ButtonSplitExample, ButtonSplitCustomExample } from './examples/Button.Split.Example';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Link } from '../../Link';\r\nimport './examples/Button.Basic.Example.scss';\r\nimport * as exampleStylesImport from '../../common/_exampleStyles.scss';\r\nconst exampleStyles: any = exampleStylesImport;\r\n\r\nconst ButtonDefaultExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Default.Example.tsx'\r\n) as string;\r\nconst ButtonCompoundExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Compound.Example.tsx'\r\n) as string;\r\nconst ButtonActionExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Action.Example.tsx'\r\n) as string;\r\nconst ButtonCommandBarExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.CommandBar.Example.tsx'\r\n) as string;\r\nconst ButtonIconExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Icon.Example.tsx'\r\n) as string;\r\nconst ButtonAnchorExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Anchor.Example.tsx'\r\n) as string;\r\nconst ButtonScreenReaderExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ScreenReader.Example.tsx'\r\n) as string;\r\nconst ButtonContextualMenuExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ContextualMenu.Example.tsx'\r\n) as string;\r\nconst ButtonSwapExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Swap.Example.tsx'\r\n) as string;\r\nconst ButtonSplitExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Split.Example.tsx'\r\n) as string;\r\n\r\nexport interface IButtonDemoPageState {\r\n  areButtonsDisabled?: boolean;\r\n  areButtonsChecked?: boolean;\r\n}\r\n\r\nexport class ButtonPage extends React.Component<IComponentDemoPageProps, IButtonDemoPageState> {\r\n  constructor(props: IComponentDemoPageProps) {\r\n    super(props);\r\n    this.state = {\r\n      areButtonsDisabled: false,\r\n      areButtonsChecked: false\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title={ 'Button' }\r\n        componentName='ButtonExample'\r\n        exampleCards={\r\n          <div>\r\n            <Checkbox\r\n              className={ exampleStyles.exampleCheckbox }\r\n              label='Disable buttons'\r\n              checked={ this.state.areButtonsDisabled }\r\n              onChange={ this._onDisabledChanged.bind(this) }\r\n            />\r\n            <Checkbox\r\n              className={ exampleStyles.exampleCheckbox }\r\n              label='Mark as checked'\r\n              checked={ this.state.areButtonsChecked }\r\n              onChange={ this._onToggledChanged.bind(this) }\r\n            />\r\n            <ExampleCard title='Default Button' code={ ButtonDefaultExampleCode }>\r\n              <ButtonDefaultExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Compound Button' code={ ButtonCompoundExampleCode }>\r\n              <ButtonCompoundExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Command Bar Button' code={ ButtonCommandBarExampleCode }>\r\n              <ButtonCommandBarExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Split Button' code={ ButtonSplitExampleCode }>\r\n              <ButtonSplitExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Icon Button' code={ ButtonIconExampleCode }>\r\n              <ButtonIconExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Contextual Menu Button' code={ ButtonContextualMenuExampleCode }>\r\n              <ButtonContextualMenuExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Action Button' code={ ButtonActionExampleCode }>\r\n              <ButtonActionExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        implementationExampleCards={\r\n          <div>\r\n            <ExampleCard title='Button Like Anchor' code={ ButtonAnchorExampleCode }>\r\n              <ButtonAnchorExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button with Aria Description for Screen Reader' code={ ButtonScreenReaderExampleCode }>\r\n              <ButtonScreenReaderExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button Swap with Focus State' code={ ButtonSwapExampleCode }>\r\n              <ButtonSwapExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Custom Split Button' code={ ButtonSplitExampleCode }>\r\n              <ButtonSplitCustomExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <div>\r\n            <PropertiesTableSet\r\n              sources={ [\r\n                require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/Button.types.ts')\r\n              ] }\r\n            />\r\n            <p>Besides the above properties, the <code>Button</code> component accepts all properties that the React <code>button</code> and <code>a</code> components accept.</p>\r\n          </div>\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.</p>\r\n            <p>When considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.</p>\r\n            <p>While buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.</p>\r\n            <p>Note that both iconProps and menuIconProps take <Link href='#/examples/icon'>IIconProps</Link> to specify name and type.</p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Make sure the label conveys a clear purpose of the button to the user.</li>\r\n              <li>Button labels must describe the action the button will perform and should include a verb. Use concise, specific, self-explanatory labels, usually a single word.</li>\r\n              <li>Buttons should always include a noun if there is any room for interpretation about what the verb operates on.</li>\r\n              <li>Consider the affect localization will have on the button and what will happen to components around it.</li>\r\n              <li>If the button’s label content is dynamic, consider how the button will resize and what will happen to components around it.</li>\r\n              <li>Use only a single line of text in the label of the button.</li>\r\n              <li>Expose only one or two buttons to the user at a time, for example, \"Accept\" and \"Cancel\". If you need to expose more actions to the user, consider using checkboxes or radio buttons from which the user can select actions, with a single command button to trigger those actions.</li>\r\n              <li>Show only one primary button that inherits theme color at rest state. In the event there are more than two buttons with equal priority, all buttons should have neutral backgrounds.</li>\r\n              <li>\"Submit\", \"OK\", and \"Apply\" buttons should always be styled as primary buttons. When \"Reset\" or \"Cancel\" buttons appear alongside one of the above, they should be styled as secondary buttons.</li>\r\n              <li>Default buttons should always perform safe operations. For example, a default button should never delete.</li>\r\n              <li>Use task buttons to cause actions that complete a task or cause a transitional task. Do not use buttons to toggle other UX in the same context. For example, a button may be used to open an interface area but should not be used to open an additional set of components in the same interface.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use generic labels like \"Ok,\" especially in the case of an error; errors are never \"Ok.\"</li>\r\n              <li>Don’t place the default focus on a button that destroys data. Instead, place the default focus on the button that performs the \"safe act\" and retains the content (i.e. \"Save\") or cancels the action (i.e. \"Cancel\").</li>\r\n              <li>Don’t use a button to navigate to another place, use a link instead. The exception is in a wizard where \"Back\" and \"Next\" buttons may be used.</li>\r\n              <li>Don’t put too much text in a button - try to keep the length of your text to a minimum.</li>\r\n              <li>Don't put anything other than text in a button.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            {...ButtonStatus}\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onDisabledChanged(ev: React.MouseEvent<HTMLElement>, disabled: boolean) {\r\n    this.setState({\r\n      areButtonsDisabled: disabled\r\n    });\r\n  }\r\n\r\n  private _onToggledChanged(ev: React.MouseEvent<HTMLElement>, toggled: boolean) {\r\n    this.setState({\r\n      areButtonsChecked: toggled\r\n    });\r\n  }\r\n}\r\n"]}